"Filed out from Dolphin Smalltalk 7"!

JadeiteAbstractTestCase subclass: #JadeiteSUnitSupportTestCase
	instanceVariableNames: 'sunitBrowser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteSUnitSupportTestCase guid: (GUID fromString: '{afd06491-29d7-4988-bf71-09264248baaa}')!
JadeiteSUnitSupportTestCase comment: ''!
!JadeiteSUnitSupportTestCase categoriesForClass!Unclassified! !
!JadeiteSUnitSupportTestCase methodsFor!

assertMenuItem: command isEnabled: boolean
	| commandQuery |
	commandQuery := self
				queryCommand: command
				inPresenter: self projectsPresenter
				view: self dictionaryPresenter view.
	boolean ifTrue: [self assert: commandQuery isEnabled] ifFalse: [self deny: commandQuery isEnabled]!

assertPackageInList: name
	self denyIsNil: (sunitBrowser primaryPresenter packageListPresenter list
				detect: [:packageService | packageService name = name]
				ifNone: [])!

denyPackageInList: name
	self assertIsNil: (sunitBrowser primaryPresenter packageListPresenter list
				detect: [:packageService | packageService name = name]
				ifNone: [])!

isSampleProjectLoaded
	^(transcript projectListPresenter projectListPresenter list
		detect: [:projectService | projectService name = self sampleProjectName]
		ifNone: []) notNil!

methodListPresenter

	^self sunitPresenter methodListPresenter!

projectsPresenter
	^projectsBrowser currentCard!

selecProjectBrowserMethodNamed: selector
	^self selecProjectBrowserMethodsNamed: (Array with: selector)!

selecProjectBrowserMethodsNamed: selectors
	| methodServices methodPresenter |
	methodPresenter := self projectsPresenter methodListPresenter.
	methodPresenter resetSelection.
	methodServices := selectors
				collect: [:selector | methodPresenter list detect: [:svc | svc selector = selector]].
	methodPresenter selections: methodServices.
	^methodServices!

selectSUnitBrowserMethodNamed: selector
	^self selectSUnitBrowserMethodsNamed: (Array with: selector)!

selectSUnitBrowserMethodsNamed: selectors
	| methodServices |
	self methodListPresenter resetSelection.
	methodServices := selectors
				collect: [:selector | self methodListPresenter list detect: [:svc | svc selector = selector]].
	self methodListPresenter selection: methodServices.
	self methodListPresenter view invalidate.
	^methodServices!

setUp
	super setUp.
	sunitBrowser := self openWindow: [transcript jadeBrowseTests].
	transcript projectListPresenter refresh!

setupAbstractSuperWithTest
	"setup abstract super class with single test + 2 subclasses"

	| source |
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self
		saveClass: 'JadeiteTest'
		superclass: 'TestCase'
		instVars: #()
		package: 'RowanSample1-Tests'.
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'JadeiteTest' in: self classListPresenter.
	self projectsPresenter selectClassTab.
	source := 'isAbstract
		^self name = #JadeiteTest'.
	self methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self selectInstanceTab.
	source := 'test_className
		"fail in one subclass only" 
		self assert: self class name = #JadeiteTestSubclass1'.
	self methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self
		saveClass: 'JadeiteTestSubclass1'
		superclass: 'JadeiteTest'
		instVars: #()
		package: 'RowanSample1-Tests'.
	self
		saveClass: 'JadeiteTestSubclass2'
		superclass: 'JadeiteTest'
		instVars: #()
		package: 'RowanSample1-Tests'!

setupRunInSelectedTestClassTest
	"setup a test in the superclass that calls a method
	defined in both the super and subclass"

	self setupTestSuperclass.
	self
		saveClass: 'RowanSample1SubClassTest'
		superclass: 'RowanSample1Test'
		instVars: Array new
		package: 'RowanSample1-Tests'.
	self methodSourcePresenter value: 'myClassName
				^#RowanSample1SubClassTest'.
	self projectsPresenter editSaveMethod: self classListPresenter selection!

setupTestSuperclass
	"setup a subclass of TestCase with a class var that can 
	record what class was actually run" 
	self selectServiceNamed: 'RowanSample1' in: self projectsPresenter projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self projectsPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self projectsPresenter classListPresenter.
	self projectsPresenter classDefinitionPresenter
		value: 'TestCase' , ' rwSubclass: ' , 'RowanSample1Test' printString
				, '
	instVarNames: ' , Array new printString
				, '
	classVars: #(TestClassVar)
	classInstVars: #()
	poolDictionaries: #()
	category: '
					, 'RowanSample1-Tests' printString , '
	options: #()'.
	self projectsPresenter editSaveClass.
	self methodSourcePresenter
		value: 'test_method
				self class setMyClassName: self class name. 
				^self assert: self class name equals: self myClassName'.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self methodSourcePresenter value: 'myClassName
				^#RowanSample1Test'.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self selectClassTab.
	self methodSourcePresenter value: 'setMyClassName: aSymbol 
				TestClassVar := aSymbol'.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self methodSourcePresenter value: 'testClassVar
				^TestClassVar'.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self selectInstanceTab.
	self methodSourcePresenter
		value: 'test_method
				self class setMyClassName: self class name. 
				^self assert: self class name equals: self myClassName'.
	self projectsPresenter editSaveMethod: self classListPresenter selection!

sunitPresenter
	^sunitBrowser primaryPresenter!

tearDown
	super tearDown.
	sunitBrowser ifNotNil: [self assert: sunitBrowser view close].
	projectsBrowser ifNotNil: [self destroy: projectsBrowser]!

test_abortNoSelections
	| abortCommand |
	self testsIssue: #issue383 withTitle: '(3.0.53) the commit button on the SUnit browser is silent'.
	self unloadSampleProject.
	self commitTransaction.	"ensure that the sample package wasn't committed"
	self denyPackageInList: 'RowanSample1-Tests'.
	self cloneRowanSample1.
	self ensureRowanSample1Loaded.
	self assertPackageInList: 'RowanSample1-Tests'.
	abortCommand := ((sunitBrowser view viewNamed: 'toolbar') itemAtIndex: 1) command.
	sunitBrowser primaryPresenter perform: abortCommand.
	[self denyPackageInList: 'RowanSample1-Tests'] ensure: 
			[self cloneRowanSample1.
			self ensureRowanSample1Loaded]!

test_abortWithSelections
	| abortCommand |
	self testsIssue: #issue383 withTitle: '(3.0.53) the commit button on the SUnit browser is silent'.
	self unloadSampleProject.
	self commitTransaction.	"ensure that the sample package wasn't committed"
	sunitBrowser primaryPresenter selectPackageNamed: 'Rowan-Services-Tests'.
	sunitBrowser primaryPresenter selectClassNamed: 'RowanTestClassServiceTest'.
	sunitBrowser primaryPresenter selectMethodNamed: #test_addCategory.
	abortCommand := ((sunitBrowser view viewNamed: 'toolbar') itemAtIndex: 1) command.
	sunitBrowser primaryPresenter perform: abortCommand.
	
	[self assert: sunitBrowser primaryPresenter packageListPresenter selection name
		equals: 'Rowan-Services-Tests'.
	self assert: sunitBrowser primaryPresenter classListPresenter selection name
		equals: 'RowanTestClassServiceTest'.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections size equals: 1.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections first selector
		equals: #test_addCategory]
			ensure: 
				[self cloneRowanSample1.
				self ensureRowanSample1Loaded]!

test_abstractTestAppearsOnlyInSubclasses
	| subclass1MethodService subclass2MethodService classNames |
	self testsIssue: #issue755
		withTitle: 'SUnit browser runs test in abstract test class if more than one test class selected'.
	self testsIssue: #issue756
		withTitle: 'SUnit Browser does not handle duplicated test method selectors well'.
	self setupAbstractSuperWithTest.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	classNames := self sunitPresenter classListPresenter list
				collect: [:classService | classService name].
	self assert: (classNames includes: 'JadeiteTestSubclass1').
	self assert: (classNames includes: 'JadeiteTestSubclass2').
	self deny: (classNames includes: 'JadeiteTest').
	self selectServicesNamed: #('JadeiteTestSubclass1' 'JadeiteTestSubclass2')
		in: self sunitPresenter classListPresenter.
	subclass1MethodService := self sunitPresenter methodListPresenter list detect: 
					[:methodService |
					methodService selector = #test_className and: [methodService className = 'JadeiteTestSubclass1']]
				ifNone: [].
	self denyIsNil: subclass1MethodService.
	subclass2MethodService := self sunitPresenter methodListPresenter list detect: 
					[:methodService |
					methodService selector = #test_className and: [methodService className = 'JadeiteTestSubclass2']]
				ifNone: [].
	self denyIsNil: subclass2MethodService.
	self sunitPresenter runAll.
	self assert: subclass1MethodService testResult equals: #passed.
	self assert: subclass2MethodService testResult equals: #failure!

test_addNewTestPackage
	"test package should show up when test method is added"

	| packageName className methodService |
	packageName := 'AddedPackage'.
	className := 'AddedTestClass'.
	self assertIsNil: (self sunitPresenter packageListPresenter list
				detect: [:packageService | packageService name = packageName]
				ifNone: []).
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self projectsPresenter projectListPresenter selection addPackageNamed: packageName
		using: self projectsPresenter.
	
	[| classService1 |
	self assertIsNil: (self sunitPresenter packageListPresenter list
				detect: [:packageService | packageService name = packageName]
				ifNone: []).	"not added until method is created"
	self
		saveClass: className
		superclass: 'TestCase'
		instVars: #('abc')
		package: packageName.
	self assertIsNil: (self sunitPresenter packageListPresenter list
				detect: [:packageService | packageService name = packageName]
				ifNone: []).	"not added until method is created"
	classService1 := RowanClassService named: className.
	classService1
		saveMethod: 'test_blah'
		category: 'tests'
		session: session.
	self denyIsNil: (self sunitPresenter packageListPresenter list
				detect: [:packageService | packageService name = packageName]
				ifNone: []).
	self selectServiceNamed: packageName in: self sunitPresenter packageListPresenter.
	self denyIsNil: (self sunitPresenter classListPresenter list
				detect: [:classService | classService name = className]
				ifNone: []).
	self selectServiceNamed: className in: self sunitPresenter classListPresenter.
	methodService := self sunitPresenter methodListPresenter list
				detect: [:svc | svc selector = #test_blah]
				ifNone: [].
	self assert: methodService selector equals: #test_blah.
	self assert: self sunitPresenter methodListPresenter list size equals: 1]
			ensure: 
				[self abortTransaction.
				self cloneRowanSample1.
				self ensureRowanSample1Loaded]!

test_browseMethods
	| browseMethodMenuItem browser selectors |
	self testsIssue: #issue207 withTitle: 'should be able to browe source for test from SUit browser'.
	self testsIssue: #issue471
		withTitle: 'First Browse Methods invocation from SUnit browser does not display source'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	selectors := self sunitPresenter methodListPresenter list collect: [:service | service selector].
	self selectMethodsNamed: selectors.
	browseMethodMenuItem := self sunitPresenter methodListPresenter view contextMenu items
				detect: [:item | item isDivider not and: ['*Browse*Selected*Tests' match: item description]]
				ifNone: [].
	browser := browseMethodMenuItem commandDescription performAgainst: self sunitPresenter.
	
	[self assert: (browser isKindOf: JadeiteMethodListBrowser).
	self assert: browser primaryPresenter methodListPresenter methodListPresenter list size
		equals: selectors size.
	self assert: browser primaryPresenter methodListPresenter selection selector equals: selectors first.
	self assert: browser primaryPresenter methodSourcePresenter documentPresenter value
		equals: self sunitPresenter methodListPresenter selections first source]
			ensure: [browser view close]!

test_browseSelectedMethodForNewlyAddedTest
	| newMethodService methodListBrowser |
	self testsIssue: #issue828
		withTitle: '`UndefinedObject does not understand #asString` from `Browse Selected method` in SUnit Browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self assertIsNil: (self methodListPresenter list
				detect: [:methodService | methodService selector == #test_newMethod]
				ifNone: []).
	self
		saveMethod: 'test_newMethod'
		in: 'RowanSample1Test'
		category: '*RowanSample1-Tests'.
	newMethodService := self methodListPresenter list
				detect: [:methodService | methodService selector == #test_newMethod]
				ifNone: [].
	self denyIsNil: newMethodService.
	self assert: newMethodService definedClassName equals: 'RowanSample1Test'.	"this inst var was nil which was the bug"
	self sunitPresenter methodListPresenter selections: (Array with: newMethodService).
	methodListBrowser := self sunitPresenter browseSelectedMethods.
	
	[self assert: methodListBrowser primaryPresenter methodListPresenter methodListPresenter selection
				selector
		equals: #test_newMethod]
			ensure: [self destroy: methodListBrowser]!

test_browseSunitClass
	| browseClassMenuItem browser |
	self testsIssue: #issue207 withTitle: 'should be able to browe source for test from SUit browser'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	browseClassMenuItem := self sunitPresenter classListPresenter view contextMenu items
				detect: [:item | '*Browse*Class*' match: item description]
				ifNone: [].
	browser := browseClassMenuItem commandDescription performAgainst: self sunitPresenter.
	
	[self assert: (browser isKindOf: JadeiteBrowser).
	self assert: browser currentCard classListPresenter selection name = 'JadeServerTest']
			ensure: [browser view close]!

test_browseTestSelectorsInSUnitTab
	| browseMethodMenuItem browser selectors |
	self testsIssue: #issue565
		withTitle: 'Would like "browse selected" in the SUnit tab of the Project Browser (3.0.79)'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self sunitPresenter classListPresenter.
	selectors := self sunitPresenter methodListPresenter list
				select: [:service | service selector = #test_addCategory]
				thenCollect: [:service | service selector].
	self selectMethodsNamed: selectors.
	browseMethodMenuItem := self sunitPresenter methodListPresenter view contextMenu items
				detect: [:item | item isDivider not and: ['*Browse*Selected*Tests' match: item description]]
				ifNone: [].
	browser := browseMethodMenuItem commandDescription performAgainst: self sunitPresenter.
	
	[self assert: (browser isKindOf: JadeiteMethodListBrowser).
	self assert: browser primaryPresenter methodListPresenter methodListPresenter list size
		equals: selectors size.
	self assert: browser primaryPresenter methodListPresenter selection selector equals: selectors first.
	browser primaryPresenter methodListPresenter methodListPresenter list
		do: [:methodService | self assert: methodService className equals: 'RowanClassServiceTest']]
			ensure: [browser view close]!

test_commitNoSelections
	| commitCommand abortCommand |
	self testsIssue: #issue383 withTitle: '(3.0.53) the commit button on the SUnit browser is silent'.
	self assertPackageInList: 'RowanSample1-Tests'.
	commitCommand := ((sunitBrowser view viewNamed: 'toolbar') itemAtIndex: 2) command.
	sunitBrowser primaryPresenter perform: commitCommand.
	
	[self assertPackageInList: 'RowanSample1-Tests'.
	abortCommand := ((sunitBrowser view viewNamed: 'toolbar') itemAtIndex: 1) command.
	sunitBrowser primaryPresenter perform: abortCommand.
	self assertPackageInList: 'RowanSample1-Tests']
			ensure: 
				["don't want committed sample project in tests"
				self unloadSampleProject.
				sunitBrowser primaryPresenter perform: commitCommand.
				self cloneRowanSample1.
				self ensureRowanSample1Loaded]!

test_commitWithSelections
	| commitCommand |
	self testsIssue: #issue383 withTitle: '(3.0.53) the commit button on the SUnit browser is silent'.
	sunitBrowser primaryPresenter selectPackageNamed: 'Rowan-Services-Tests'.
	sunitBrowser primaryPresenter selectClassNamed: 'RowanTestClassServiceTest'.
	sunitBrowser primaryPresenter selectMethodNamed: #test_addCategory.
	commitCommand := ((sunitBrowser view viewNamed: 'toolbar') itemAtIndex: 2) command.
	sunitBrowser primaryPresenter perform: commitCommand.
	
	[self assert: sunitBrowser primaryPresenter packageListPresenter selection name
		equals: 'Rowan-Services-Tests'.
	self assert: sunitBrowser primaryPresenter classListPresenter selection name
		equals: 'RowanTestClassServiceTest'.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections size equals: 1.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections first selector
		equals: #test_addCategory]
			ensure: 
				["don't want committed sample project in tests"
				self unloadSampleProject.
				sunitBrowser primaryPresenter perform: commitCommand.
				self cloneRowanSample1.
				self ensureRowanSample1Loaded]!

test_debugWithDifferentSelectedClasses
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	self selectMethodNamed: #test_jadeServerCanonicalLocation.
	self sunitPresenter debug.
	self assert: self methodListPresenter selections first testResult equals: 'passed'.
	self selectServicesNamed: #('JadeServerTest' 'RowanAnsweringServiceTest')
		in: self sunitPresenter classListPresenter.
	self selectMethodNamed: #test_jadeServerCanonicalLocation.
	self sunitPresenter debug.
	self assert: self methodListPresenter selections first testResult equals: 'passed'!

test_dontAddClassWhenPackageNotSelected
	| classesSize |
	self testsIssue: #issue376
		withTitle: 'SUnit browser updated with lists of classes without updating the package selection (3.1pr4)'.
	self assert: sunitBrowser primaryPresenter classListPresenter selections isEmpty.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self selectServiceNamed: 'test1' in: self projectsPresenter methodListPresenter.
	self
		saveMethod: 'test_method'
		in: 'RowanSample1Test'
		category: 'other'.
	self assert: sunitBrowser primaryPresenter classListPresenter selections isEmpty.
	self projectsPresenter removeMethodSelector: #test_method.
	self assert: sunitBrowser primaryPresenter classListPresenter selections isEmpty.
	sunitBrowser primaryPresenter selectPackageNamed: 'Rowan-Services-Tests'.
	classesSize := sunitBrowser primaryPresenter classListPresenter list size.
	self assert: classesSize > 0.
	self
		saveMethod: 'test_method'
		in: 'RowanSample1Test'
		category: 'other'.
	self assert: sunitBrowser primaryPresenter classListPresenter list size = classesSize.
	self projectsPresenter removeMethodSelector: #test_method.
	self assert: sunitBrowser primaryPresenter classListPresenter list size = classesSize!

test_dontChangeTabs
	| methodService |
	self testsIssue: #issue405 withTitle: 'SUnit select class flips sunit pane in PB to the method'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	methodService := self projectsPresenter methodListPresenter list
				detect: [:svc | svc selector = #test1].
	self projectsPresenter methodListPresenter selection: methodService.
	self projectsPresenter selectSUnitTab.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self assert: self projectsPresenter textAreaTabs currentCard
				= (self projectsPresenter view viewNamed: 'sunit')!

test_dontClearResults
	self testsIssue: #issue410
		withTitle: 'Selecting class in Project Browser changes test status icons in SUnit Browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter list size equals: 4.
	self selectSUnitBrowserMethodNamed: #test1.
	self sunitPresenter runSelected.
	self assert: self sunitPresenter methodListPresenter selections first selector equals: #test1.
	self assert: self sunitPresenter methodListPresenter selections first testResult equals: 'passed'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self selectMethodNamed: #test1.
	self assert: self methodListPresenter selections first selector equals: #test1.
	self assert: self sunitPresenter methodListPresenter selections first selector equals: #test1.
	self assert: self sunitPresenter methodListPresenter selections first testResult equals: 'passed'!

test_extensionOnlyTestClassVisible
	self testsIssue: #issue376
		withTitle: 'SUnit browser updated with lists of classes without updating the package selection (3.1pr4)'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self projectsPresenter methodListPresenter
		selections: self projectsPresenter methodListPresenter list.
	self projectsPresenter removeMethods: self projectsPresenter classListPresenter selections.
	self assert: self methodListPresenter list isEmpty.
	self
		saveMethod: 'test_extension'
		in: 'RowanSample1Test'
		category: '*RowanSample1-Extensions'.
	self selectServiceNamed: 'RowanSample1-Extensions'
		in: sunitBrowser primaryPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: sunitBrowser primaryPresenter classListPresenter.
	self assert: self methodListPresenter list size equals: 1.
	self assert: self methodListPresenter list first selector equals: #test_extension!

test_extensionTestShowsUpInSUnitBrowser
	| source |
	self testsIssue: #issue378
		withTitle: '(3.0.53) test class not defined in package shows up in package of SUnit browser'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self
		saveClass: 'TestTestClass'
		superclass: 'TestCase'
		instVars: #()
		package: 'RowanSample1-Tests'.
	
	[self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'TestTestClass' in: self classListPresenter.
	self projectsPresenter basicAddMethodCategory: '*rowansample1-core'.	"will put method in RowanSample1-Core package"
	source := 'test_inExtensionMethod  
		| aaa | 
		aaa := 123. 
		^aaa'.
	self methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self assert: self projectsPresenter methodListPresenter selections first isExtension.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self denyIsNil: (self classListPresenter list
				detect: [:classService | classService name = 'TestTestClass']
				ifNone: []).
	self selectServiceNamed: 'TestTestClass' in: self sunitPresenter classListPresenter.
	self denyIsNil: (self methodListPresenter list
				detect: [:methodService | methodService selector = #test_inExtensionMethod]
				ifNone: [])]
			ensure: [self projectsPresenter basicRemoveClass: self projectsPresenter selectedClass]!

test_extensionTestsShowUpInExtensionAndDefinedPackages
	self testsIssue: #issue378
		withTitle: '(3.0.53) test class not defined in package shows up in package of SUnit browser'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self
		saveMethod: 'test_extension'
		in: 'RowanSample1Test'
		category: '*RowanSample1-Extensions'.
	self selectServiceNamed: 'RowanSample1-Extensions'
		in: sunitBrowser primaryPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: sunitBrowser primaryPresenter classListPresenter.
	self assert: self methodListPresenter list size equals: 5.
	self assert: self methodListPresenter list first selector equals: #test_extension.
	self assert: self methodListPresenter list second selector equals: #test1.
	self selectServiceNamed: 'RowanSample1-Tests' in: sunitBrowser primaryPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: sunitBrowser primaryPresenter classListPresenter.
	self assert: self methodListPresenter list size equals: 5.
	self assert: self methodListPresenter list first selector equals: #test_extension.
	self assert: self methodListPresenter list second selector equals: #test1!

test_inheritedTests
	| subTestClassTestSelectors testClassTestSelectors source |
	self openProjectBrowser.
	self testsIssue: #issue211
		withTitle: 'SUnit browser and SUnit tab in Project browser missing inherited test cases'.
	self
		saveClass: 'RowanTestSubClassServiceTest'
		superclass: 'RowanTestClassServiceTest'
		instVars: Array new
		package: 'Rowan-Services-Tests'.
	
	[source := 'testMethod

	^self assert: true'.
	self projectsPresenter basicAddMethodCategory: 'testing'.
	self methodSourcePresenter value: source.
	self classListPresenter selection meta: false.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self sunitPresenter classListPresenter.
	testClassTestSelectors := self sunitPresenter methodListPresenter list
				collect: [:service | service selector].
	self selectServiceNamed: 'RowanTestSubClassServiceTest' in: self sunitPresenter classListPresenter.
	self assert: (session executeString: 'RowanTestClassServiceTest shouldInheritSelectors').	"required to see the superclass non-abstract methods"
	subTestClassTestSelectors := self sunitPresenter methodListPresenter list
				collect: [:service | service selector].
	self assert: subTestClassTestSelectors size > testClassTestSelectors size.	"the subclass inherits the super class's tests"
	testClassTestSelectors do: [:selector | self assert: (subTestClassTestSelectors includes: selector)]]
			ensure: [self projectsPresenter basicRemoveClass: self projectsPresenter classListPresenter selection]!

test_maintainColumnSort
	| firstSortedMethods secondSortedMethods |
	self openProjectBrowser.
	self testsIssue: #issue775 withTitle: 'Stubborn sorting in the Sunit browser'.
	self
		saveClass: 'RowanTestSubClassServiceTest'
		superclass: 'RowanTestClassServiceTest'
		instVars: Array new
		package: 'Rowan-Services-Tests'.
	
	[self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServicesNamed: #('RowanTestClassServiceTest' 'RowanTestSubClassServiceTest')
		in: self sunitPresenter classListPresenter.	"select two so both sortable columns appear"
	self sunitPresenter methodListPresenter view columnClicked: 1.	"class column"
	self sunitPresenter methodListPresenter list first className = 'RowanTestSubClassServiceTest'
		ifTrue: [self sunitPresenter methodListPresenter view columnClicked: 1	"resort if necessary"].
	firstSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService className].
	self selectServicesNamed: Array new in: self sunitPresenter classListPresenter.	"clear selection just in case"
	self selectServicesNamed: #('RowanTestClassServiceTest' 'RowanTestSubClassServiceTest')
		in: self sunitPresenter classListPresenter.
	secondSortedMethods := (self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService className]) asSortedCollection
				asOrderedCollection.
	self assert: firstSortedMethods equals: secondSortedMethods.
	self sunitPresenter methodListPresenter view columnClicked: 2.	"method column"
	firstSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector].
	self selectServicesNamed: Array new in: self sunitPresenter classListPresenter.	"clear selection just in case"
	self selectServicesNamed: #('RowanTestClassServiceTest' 'RowanTestSubClassServiceTest')
		in: self sunitPresenter classListPresenter.
	secondSortedMethods := (self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector]) asSortedCollection
				asOrderedCollection.
	self assert: firstSortedMethods equals: secondSortedMethods]
			ensure: [self projectsPresenter basicRemoveClass: self projectsPresenter classListPresenter selection]!

test_maintainColumnSortChangeFromProjectBrowser
	| firstSortedMethods secondSortedMethods |
	self testsIssue: #issue775 withTitle: 'Stubborn sorting in the Sunit browser'.
	self openProjectBrowser.
	self
		saveClass: 'RowanTestSubClassServiceTest'
		superclass: 'RowanTestClassServiceTest'
		instVars: Array new
		package: 'Rowan-Services-Tests'.
	
	[self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServicesNamed: #('RowanTestClassServiceTest' 'RowanTestSubClassServiceTest')
		in: self sunitPresenter classListPresenter.
	self sunitPresenter methodListPresenter view columnClicked: 1.	"class column"
	self sunitPresenter methodListPresenter list first className = 'RowanTestSubClassServiceTest'
		ifTrue: 
			[self sunitPresenter methodListPresenter view columnClicked: 1	"resort if necessary for ascending list"].
	firstSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService className].
	self openProjectBrowser.
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServicesNamed: #('RowanTestSubClassServiceTest') in: self classListPresenter.
	secondSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService className].
	self assert: firstSortedMethods equals: secondSortedMethods.
	self selectServicesNamed: #('RowanTestClassServiceTest') in: self classListPresenter.
	secondSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService className].
	self assert: firstSortedMethods equals: secondSortedMethods.
	self sunitPresenter methodListPresenter view columnClicked: 2.	"method column"
	self sunitPresenter methodListPresenter list first className = 'RowanTestSubClassServiceTest'
		ifTrue: [self sunitPresenter methodListPresenter view columnClicked: 1	"resort if necessary"].
	firstSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector].
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServicesNamed: #('RowanTestClassServiceTest') in: self classListPresenter.
	secondSortedMethods := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector].
	self assert: firstSortedMethods equals: secondSortedMethods]
			ensure: 
				[self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
				self selectServicesNamed: #('RowanTestSubClassServiceTest') in: self classListPresenter.
				self projectsPresenter basicRemoveClass: self projectsPresenter classListPresenter selection]!

test_menuEnablementDebugInClassPresenter
	| debugItem query |
	self testsIssue: #issue391 withTitle: '(3.0.53) SUnit browser running test method in wrong class'.
	self openProjectBrowser.
	self selectRowanSample1Test.
	self projectsPresenter selectSUnitTab.
	self methodListPresenter resetSelection.
	self sunitPresenter methodListPresenter resetSelection.
	debugItem := self projectsPresenter sunitPresenter methodListPresenter view queryContextMenu items
				detect: [:menuItem | menuItem command == #debug].
	query := CommandQuery commandDescription: debugItem commandDescription
				source: self projectsPresenter sunitPresenter methodListPresenter view.
	self projectsPresenter queryCommand: query.
	self deny: query isEnabled.
	self selectMethodNamedInProjectBrowser: #test1.
	self projectsPresenter queryCommand: query.
	self assert: query isEnabled.
	self projectsPresenter methodListPresenter resetSelection.
	self projectsPresenter queryCommand: query.
	self deny: query isEnabled.
	self projectsPresenter selectSUnitTab.
	self projectsPresenter sunitPresenter methodListPresenter selectionByIndex: #(1).	"#test1"
	self projectsPresenter sunitPresenter queryCommand: query.
	self assert: query isEnabled.
	self projectsPresenter sunitPresenter methodListPresenter resetSelection.
	self projectsPresenter sunitPresenter queryCommand: query.
	self deny: query isEnabled!

test_menuEnablementRunAndMesureTimeInClassPresenter
	| runAndMesureTimeItem query |
	self testsIssue: #issue391 withTitle: '(3.0.53) SUnit browser running test method in wrong class'.
	self openProjectBrowser.
	self selectRowanSample1Test.
	self projectsPresenter selectSUnitTab.
	self methodListPresenter resetSelection.
	self sunitPresenter methodListPresenter resetSelection.
	runAndMesureTimeItem := self projectsPresenter sunitPresenter methodListPresenter view
				queryContextMenu items
				detect: [:menuItem | menuItem command == #runAndMesureTime].
	query := CommandQuery commandDescription: runAndMesureTimeItem commandDescription
				source: self projectsPresenter sunitPresenter methodListPresenter view.
	self projectsPresenter queryCommand: query.
	self deny: query isEnabled.
	self selectMethodNamedInProjectBrowser: #test1.
	self projectsPresenter queryCommand: query.
	self assert: query isEnabled.
	self projectsPresenter methodListPresenter resetSelection.
	self projectsPresenter queryCommand: query.
	self deny: query isEnabled.
	self projectsPresenter selectSUnitTab.
	self projectsPresenter sunitPresenter methodListPresenter selectionByIndex: #(1).	"#test1"
	self projectsPresenter sunitPresenter queryCommand: query.
	self assert: query isEnabled.
	self projectsPresenter sunitPresenter methodListPresenter resetSelection.
	self projectsPresenter sunitPresenter queryCommand: query.
	self deny: query isEnabled!

test_menuEnablementRunSelectedInClassPresenter
	| runSelectedItem query |
	self testsIssue: #issue391 withTitle: '(3.0.53) SUnit browser running test method in wrong class'.
	self openProjectBrowser.
	self selectRowanSample1Test.
	self projectsPresenter selectSUnitTab.
	self methodListPresenter resetSelection.
	self sunitPresenter methodListPresenter resetSelection.
	runSelectedItem := self projectsPresenter sunitPresenter methodListPresenter view queryContextMenu
				items detect: [:menuItem | menuItem command == #runSelected].
	query := CommandQuery commandDescription: runSelectedItem commandDescription
				source: self projectsPresenter sunitPresenter methodListPresenter view.
	self projectsPresenter queryCommand: query.
	self deny: query isEnabled.
	self selectMethodNamedInProjectBrowser: #test1.
	self projectsPresenter queryCommand: query.
	self assert: query isEnabled.
	self projectsPresenter methodListPresenter resetSelection.
	self projectsPresenter queryCommand: query.
	self deny: query isEnabled.
	self projectsPresenter selectSUnitTab.
	self projectsPresenter sunitPresenter methodListPresenter selectionByIndex: #(1).	"#test1"
	self projectsPresenter sunitPresenter queryCommand: query.
	self assert: query isEnabled.
	self projectsPresenter sunitPresenter methodListPresenter resetSelection.
	self projectsPresenter sunitPresenter queryCommand: query.
	self deny: query isEnabled!

test_methodColumnDisplay
	self testsIssue: #issue799 withTitle: '(3.1.0) Wondering what purpose the `Test Execution Class` column serves in SUnit Browser'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self assert: self sunitPresenter methodListPresenter view columnsList size equals: 1. 
	self selectServicesNamed: #('RowanTestClassServiceTest')
		in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter view columnsList size equals: 1. 
	self assert: self sunitPresenter methodListPresenter view columnsList first text equals: 'Test Selector'. 
	self assert: (self sunitPresenter methodListPresenter list first isKindOf: RowanMethodService). 
	self selectServicesNamed: #('RowanTestClassServiceTest' 'RowanProjectServiceTest')
		in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter view columnsList size equals: 2. 
	self assert: self sunitPresenter methodListPresenter view columnsList first text equals: 'Test Execution Class'. 
	self assert: self sunitPresenter methodListPresenter view columnsList last text equals: 'Test Selector'. 
	self assert: (self sunitPresenter methodListPresenter list first isKindOf: RowanMethodService). 
	self selectServicesNamed: #('RowanTestClassServiceTest')
		in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter view columnsList size equals: 1. 
	self assert: self sunitPresenter methodListPresenter view columnsList first text equals: 'Test Selector'. 
	self assert: (self sunitPresenter methodListPresenter list first isKindOf: RowanMethodService). !

test_multiSelectClasses
	| jadeServerTestCount rowanClassServiceTestCount |
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter classListPresenter selections size equals: 1.
	jadeServerTestCount := self sunitPresenter methodListPresenter list size.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter classListPresenter selections size equals: 1.
	rowanClassServiceTestCount := self sunitPresenter methodListPresenter list size.
	self selectServicesNamed: #('JadeServerTest' 'RowanTestClassServiceTest')
		in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter classListPresenter selections size equals: 2.
	self assert: self sunitPresenter methodListPresenter list size
		equals: jadeServerTestCount + rowanClassServiceTestCount!

test_multiSelectNoDuplicates
	self testsIssue: #issue336
		withTitle: 'S-Unit Tests In an abstract class and its subclasses are not managed properly'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServicesNamed: #('RowanTestClassServiceTest' 'RowanTestClassServiceTest')
		in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter list size
				= self sunitPresenter methodListPresenter list asSet size!

test_openSunitBrowser
	"browser opened in setup"

	self assert: (sunitBrowser isKindOf: JadeiteSUnitBrowser)!

test_openTwoSUnitBrowsersLosingPackageSelection
	"unreported bug - losing selections if second sunit browser open"

	| secondSunitBrowser |
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self selectSUnitBrowserMethodNamed: #test1.
	self assert: self sunitPresenter packageListPresenter selections first name
		equals: 'RowanSample1-Tests'.
	self assert: self sunitPresenter classListPresenter selections first name equals: 'RowanSample1Test'.
	self assert: self sunitPresenter methodListPresenter selections first selector equals: #test1.
	secondSunitBrowser := self openWindow: [transcript jadeBrowseTests].
	
	[self assert: self sunitPresenter packageListPresenter selections first name
		equals: 'RowanSample1-Tests'.
	self assert: self sunitPresenter classListPresenter selections first name equals: 'RowanSample1Test'.
	self assert: self sunitPresenter methodListPresenter selections first selector equals: #test1.
	self selectServiceNamed: 'RowanSample1-Tests'
		in: secondSunitBrowser primaryPresenter packageListPresenter.
	self assert: self sunitPresenter packageListPresenter selections first name
		equals: 'RowanSample1-Tests'.
	self assert: self sunitPresenter classListPresenter selections first name equals: 'RowanSample1Test'.
	self assert: self sunitPresenter methodListPresenter selections first selector equals: #test1]
			ensure: [self destroy: secondSunitBrowser]!

test_packageRemovedOnClassRemoval
	"If a class is removed and it's the last class
	in a test package, make sure the test package
	disappears from the sunit browser"

	self testsIssue: #issue378
		withTitle: '(3.0.53) test class not defined in package shows up in package of SUnit browser'.
	self assertPackageInList: 'RowanSample1-Tests'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self projectsPresenter basicRemoveClass: self projectsPresenter selectedClass.
	self assert: self projectsPresenter classListPresenter list isEmpty.
	self denyPackageInList: 'RowanSample1-Tests'!

test_projectBrowserRunAllTests
	"https://github.com/GemTalk/Jadeite/issues/218#issuecomment-445919980"

	self testsIssue: #issue218 withTitle: 'Ctl-B does not `debug` selected test in SUnit browser'.
	self openProjectBrowser.
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self classListPresenter.
	self projectsPresenter runAll.
	self assert: self projectsPresenter isSunitTabSelected.
	self projectsPresenter sunitPresenter methodListPresenter selections
		do: [:methodService | self assert: methodService testResult equals: 'passed']!

test_projectBrowserRunSelectedTests
	"https://github.com/GemTalk/Jadeite/issues/218#issuecomment-445919980"

	self testsIssue: #issue218 withTitle: 'Ctl-B does not `debug` selected test in SUnit browser'.
	self openProjectBrowser.
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanClassServiceTest' in: self classListPresenter.
	self selecProjectBrowserMethodNamed: #test_addCategory.
	self projectsPresenter runSelected.
	self assert: self projectsPresenter isSunitTabSelected.
	self assert: self projectsPresenter sunitPresenter methodListPresenter selection size equals: 1.
	self assert: self projectsPresenter sunitPresenter methodListPresenter selections first selector
		equals: #test_addCategory.
	self assert: self projectsPresenter sunitPresenter methodListPresenter selections first testResult
		equals: 'passed'!

test_projectBrowserTestRunningMenuItemEnablement
	"https://github.com/GemTalk/Jadeite/issues/218#issuecomment-445919980"

	self testsIssue: #issue218 withTitle: 'Ctl-B does not `debug` selected test in SUnit browser'.
	self openProjectBrowser.
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self classListPresenter.
	self assertMenuItem: #runMethodTests isEnabled: false.
	self assertMenuItem: #runAll isEnabled: true.
	self assertMenuItem: #runSelected isEnabled: false.
	self selecProjectBrowserMethodNamed: #test_addCategory.
	self assertMenuItem: #runMethodTests isEnabled: true.
	self assertMenuItem: #runAll isEnabled: true.
	self assertMenuItem: #runSelected isEnabled: true.
	self selecProjectBrowserMethodNamed: #setUp.
	self assertMenuItem: #runMethodTests isEnabled: false.
	self assertMenuItem: #runAll isEnabled: true.
	self assertMenuItem: #runSelected isEnabled: false!

test_refresh
	| source newMethod |
	self testsIssue: #issue279 withTitle: 'Sunit browser refresh, auto or manual'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter list size equals: 4.
	newMethod := self sunitPresenter methodListPresenter list
				detect: [:methodService | methodService selector == #testMethod]
				ifNone: [].
	self assertIsNil: newMethod.
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self classListPresenter.
	source := 'testMethod  
		self assert: true'.
	self projectsPresenter methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self projectsPresenter classListPresenter selection.
	newMethod := self sunitPresenter methodListPresenter list
				detect: [:methodService | methodService selector == #testMethod]
				ifNone: [].
	self denyIsNil: newMethod.
	self assert: self sunitPresenter methodListPresenter list size equals: 5!

test_registeredPresentersInSUnitBrowserCleanedUp
	| registeredPresenters secondBrowser |
	registeredPresenters := BrowserUpdate current registeredPresenters size.
	secondBrowser := self openWindow: [transcript jadeBrowseTests].
	self assert: BrowserUpdate current registeredPresenters size > registeredPresenters.
	self destroy: secondBrowser.
	secondBrowser := nil.
	self assert: BrowserUpdate current registeredPresenters size equals: registeredPresenters!

test_resetMenuItemsNamedProperly
	"https://github.com/GemTalk/Jadeite/issues/218#issuecomment-445919980"

	| resetMenuItem |
	self testsIssue: #issue218 withTitle: 'Ctl-B does not `debug` selected test in SUnit browser'.
	self openProjectBrowser.
	self projectsPresenter selectSUnitTab.
	resetMenuItem := self projectsPresenter sunitPresenter methodListPresenter view contextMenu items
				detect: [:menuItem | '*Reset*' match: menuItem text]
				ifNone: [].
	self denyIsNil: resetMenuItem.
	resetMenuItem := self sunitPresenter methodListPresenter view contextMenu items
				detect: [:menuItem | '*Reset*' match: menuItem text]
				ifNone: [].
	self denyIsNil: resetMenuItem!

test_resetStatusBar
	self testsIssue: #issue411 withTitle: 'SUnit browser''s colored status bar is sticky'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	self sunitPresenter runAll.
	self
		assert: ('* run, * passed, 0 failures, 0 errors' match: self sunitPresenter textResultPresenter value).
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self selectServiceNamed: 'RowanAnsweringServiceTest' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter textResultPresenter value equals: String new.
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color face3d.
	self sunitPresenter runAll.
	self
		assert: ('* run, * passed, 0 failures, 0 errors' match: self sunitPresenter textResultPresenter value).
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self selectServiceNamed: 'Rowan-Tests' in: self sunitPresenter packageListPresenter.
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color face3d.
	!

test_runClassTests
	self testsIssue: #issue341 withTitle: 'Run sunit tests from class pass when they should not'.
	projectsBrowser
		ifNil: [projectsBrowser := self openWindow: [JadeiteBrowser showOnSession: session]].
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self classListPresenter.
	self projectsPresenter selectSUnitTab.
	[self projectsPresenter runClassTests] on: Error
		do: 
			[:ex |
			self assert: ex messageText
				equals: 'a MessageNotUnderstood occurred (error 2010), a RowanSample1 does not understand  #''bar'''].
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanAnsweringServiceTest' in: self classListPresenter.
	self projectsPresenter selectSUnitTab.
	self projectsPresenter runClassTests.
	self methodListPresenter list do: [:methodService | self assert: methodService passed]!

test_sameSelectorInheritedTests
	| source superMethodService subMethodService |
	self testsIssue: #issue755
		withTitle: 'SUnit browser runs test in abstract test class if more than one test class selected'.
	self testsIssue: #issue756
		withTitle: 'SUnit Browser does not handle duplicated test method selectors well'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self
		saveClass: 'RowanSample1TestSubclass'
		superclass: 'RowanSample1Test'
		instVars: #()
		package: 'RowanSample1-Tests'.
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanSample1TestSubclass' in: self classListPresenter.
	source := 'test1
		"same selector as superclass"
		self assert: false'.
	self methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServicesNamed: #('RowanSample1Test' 'RowanSample1TestSubclass')
		in: self sunitPresenter classListPresenter.
	superMethodService := self sunitPresenter methodListPresenter list
				detect: [:methodService | methodService selector = #test1 and: [methodService className = 'RowanSample1Test']]
				ifNone: [].
	self denyIsNil: superMethodService.
	subMethodService := self sunitPresenter methodListPresenter list
				detect: [:methodService | methodService selector = #test1 and: [methodService className = 'RowanSample1TestSubclass']]
				ifNone: [].
	self denyIsNil: subMethodService.
	self sunitPresenter runAll.
	self assert: superMethodService testResult equals: #passed.
	self assert: subMethodService testResult equals: #failure!

test_sameSelectorInheritedTestsFailureInSuper
	| source superMethodService subMethodService |
	self testsIssue: #issue755
		withTitle: 'SUnit browser runs test in abstract test class if more than one test class selected'.
	self testsIssue: #issue756
		withTitle: 'SUnit Browser does not handle duplicated test method selectors well'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self
		saveClass: 'RowanSample1TestSubclass'
		superclass: 'RowanSample1Test'
		instVars: #()
		package: 'RowanSample1-Tests'.
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanSample1TestSubclass' in: self classListPresenter.
	source := 'testFailure
		"same selector as superclass"
		self assert: true'.
	self methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServicesNamed: #('RowanSample1Test' 'RowanSample1TestSubclass')
		in: self sunitPresenter classListPresenter.
	superMethodService := self sunitPresenter methodListPresenter list
				detect: [:methodService | methodService selector = #testFailure and: [methodService className = 'RowanSample1Test']]
				ifNone: [].
	self denyIsNil: superMethodService.
	subMethodService := self sunitPresenter methodListPresenter list detect: 
					[:methodService |
					methodService selector = #testFailure and: [methodService className = 'RowanSample1TestSubclass']]
				ifNone: [].
	self denyIsNil: subMethodService.
	self sunitPresenter runAll.
	self assert: superMethodService testResult equals: #failure.
	self assert: subMethodService testResult equals: #passed!

test_saveMethodInProjectBrowser
	"should show up in sunit browser and disappear when removed"

	| source |
	self testsIssue: #issue395 withTitle: '(3.0.54) Sunit can display non-test methods'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self selectSUnitBrowserMethodsNamed: (Array with: #test1).
	self assertIsNil: (self sunitPresenter methodListPresenter model
				detect: [:methodService | methodService selector = #testInProjectBrowser]
				ifNone: []).
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	source := 'testInProjectBrowser  
		| aaa | 
		aaa := 123. 
		^aaa'.
	self methodSourcePresenter value: source.
	self projectsPresenter editSaveMethod: self classListPresenter selection.
	
	[self assert: self projectsPresenter methodListPresenter selection selector
		equals: #testInProjectBrowser.
	self denyIsNil: (self sunitPresenter methodListPresenter model
				detect: [:methodService | methodService selector = #testInProjectBrowser]
				ifNone: [])]
			ensure: [self projectsPresenter basicRemoveMethods].
	self assertIsNil: (self projectsPresenter methodListPresenter model
				detect: [:methodService | methodService selector = #testInProjectBrowser]
				ifNone: []).
	self assertIsNil: (self sunitPresenter methodListPresenter model
				detect: [:methodService | methodService selector = #testInProjectBrowser]
				ifNone: [])!

test_selectCategoryInProjectBrowserDoesNotUpdateSunitBrowser
	| sunitDisplayedMethodCount sunitDisplaySelectors |
	self testsIssue: #issue395 withTitle: '(3.0.54) Sunit can display non-test methods'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self sunitPresenter classListPresenter.
	sunitDisplayedMethodCount := self sunitPresenter methodListPresenter list size.
	sunitDisplaySelectors := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector].
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self classListPresenter.
	self selectCategoryNamed: 'support'.
	self assert: self sunitPresenter methodListPresenter list size equals: sunitDisplayedMethodCount.	"no changes"
	self assert: (self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector])
		equals: sunitDisplaySelectors.
	self projectsPresenter methodListPresenter list
		do: [:methodService | self deny: ('test*' match: methodService selector asString)].
	self categoryListPresenter selections: #().
	self selectCategoryNamed: 'tests'.
	self assert: self sunitPresenter methodListPresenter list size equals: sunitDisplayedMethodCount.	"no changes"
	self assert: (self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector])
		equals: sunitDisplaySelectors.
	self projectsPresenter methodListPresenter list
		do: [:methodService | self assert: ('test*' match: methodService selector asString)]!

test_selectClassDoesNotLoseTestResults
	| secondBrowser |
	self testsIssue: #issue432
		withTitle: 'Fix for cross-browser clearing test results is incomplete in 3.0.60'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self projectsPresenter selectSUnitTab.
	secondBrowser := JadeiteBrowser showOnSession: session.
	self projectsPresenter sunitPresenter runAll.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult
		equals: 'passed'.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list second testResult
		equals: 'passed'.
	self selectServiceNamed: 'RowanSample1' in: secondBrowser currentCard projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: secondBrowser currentCard packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: secondBrowser currentCard classListPresenter.
	self testsIssue: #issue736 withTitle: 'Test status icons retained on focus change (3.0.93-8) #736'.
	"behavior changed to clear results when sunit tab changed"
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult
		equals: nil.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list second testResult
		equals: nil!

test_selectInProjectBrowserDoesNotUpdateSunitBrowser
	| sunitDisplayedMethodCount sunitDisplaySelectors |
	self testsIssue: #issue395 withTitle: '(3.0.54) Sunit can display non-test methods'.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self sunitPresenter classListPresenter.
	sunitDisplayedMethodCount := self sunitPresenter methodListPresenter list size.
	sunitDisplaySelectors := self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector].
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectServiceNamed: 'Rowan' in: self projectListPresenter.
	self selectServiceNamed: 'Rowan-Services-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self classListPresenter.
	self assert: self sunitPresenter methodListPresenter list size equals: sunitDisplayedMethodCount.	"no changes"
	self assert: (self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector])
		equals: sunitDisplaySelectors.
	self selectServiceNamed: 'RowanAnsweringServiceTest' in: self classListPresenter.	"click away in project browser and back - no changes"
	self selectServiceNamed: 'RowanTestClassServiceTest' in: self classListPresenter.
	self assert: self sunitPresenter methodListPresenter list size equals: sunitDisplayedMethodCount.	"no changes"
	self assert: (self sunitPresenter methodListPresenter list
				collect: [:methodService | methodService selector])
		equals: sunitDisplaySelectors!

test_selectionRemainsVisible
	| position methodListPresenter |
	self testsIssue: #issue467
		withTitle: '(3.0.68) nice to have selected test remain visible aftr pressing the `run selected` button'.
	self selectServiceNamed: 'Rowan-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RwRowanProjectIssuesTest' in: self sunitPresenter classListPresenter.
	methodListPresenter := self sunitPresenter methodListPresenter.
	self selectServiceNamed: 'testIssue217' in: methodListPresenter.
	self assert: self sunitPresenter runSelected isKindOf: JadeTestResult.	"runSelected sends back the result of the last test"
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self assert: methodListPresenter selections first selector equals: #testIssue217.
	position := methodListPresenter view itemRect:  methodListPresenter selectionByIndex first. 
	self assert: ((0@0 extent: methodListPresenter view rectangle extent) contains: position)!

test_selectMethodFromProjectBrowser
	self testsIssue: #issue395 withTitle: '(3.0.54) Sunit can display non-test methods'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self selectSUnitBrowserMethodsNamed: (Array with: #test1).
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self selecProjectBrowserMethodNamed: #test1.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections first selector
		equals: #test1.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections size equals: 1.
	self assert: self methodListPresenter selections first selector equals: #test1.
	self assert: self methodListPresenter selections size equals: 1.
	self selectSUnitBrowserMethodsNamed: (Array with: #test2).
	self assert: sunitBrowser primaryPresenter methodListPresenter selections first selector
		equals: #test2.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections size equals: 1.
	self assert: self projectsPresenter methodListPresenter selections first selector equals: #test1.
	self assert: self projectsPresenter methodListPresenter selections size equals: 1.
	self selecProjectBrowserMethodNamed: #test2.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections first selector
		equals: #test2.
	self assert: sunitBrowser primaryPresenter methodListPresenter selections size equals: 1.
	self assert: self projectsPresenter methodListPresenter selections first selector equals: #test2.
	self assert: self projectsPresenter methodListPresenter selections size equals: 1!

test_statusBarUpdatesAfterDebug
	| testCount |
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	self selectMethodNamed: #test_jadeServerCanonicalLocation.
	self assert: self sunitPresenter textResultPresenter value isEmpty.
	self sunitPresenter debug.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self selectMethodsNamed: #(#test_jadeServerCanonicalLocation #test_jadeServerExists).
	self sunitPresenter debug.
	self assert: self sunitPresenter textResultPresenter value
		equals: '2 run, 2 passed, 0 failures, 0 errors'.
	self methodListPresenter view selectAll.
	self sunitPresenter debug.
	testCount := self methodListPresenter list size.
	self assert: self sunitPresenter textResultPresenter value
		equals: testCount printString , ' run, ' , testCount printString , ' passed, 0 failures, 0 errors'!

test_statusBarUpdatesAfterRunSelected
	| testCount |
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	self selectMethodNamed: #test_jadeServerCanonicalLocation.
	self assert: self sunitPresenter textResultPresenter value isEmpty.
	self sunitPresenter runSelected.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self selectMethodsNamed: #(#test_jadeServerCanonicalLocation #test_jadeServerExists).
	self sunitPresenter runSelected.
	self assert: self sunitPresenter textResultPresenter value
		equals: '2 run, 2 passed, 0 failures, 0 errors'.
	self methodListPresenter view selectAll.
	self sunitPresenter runSelected.
	testCount := self methodListPresenter list size.
	self assert: self sunitPresenter textResultPresenter value
		equals: testCount printString , ' run, ' , testCount printString , ' passed, 0 failures, 0 errors'!

test_sunitBrowserHasRowanPackages
	self assert: (self sunitPresenter isKindOf: JadeiteSUnitPresenter).	"a different presenter is used in the projects browser"
	self assert: self sunitPresenter packageListPresenter list size > 0.
	self denyIsNil: (self serviceNamed: 'Rowan-Tests' in: self sunitPresenter packageListPresenter).
	self
		denyIsNil: (self serviceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter)!

test_sunitBrowserHasRowanTestClasses
	self assert: self sunitPresenter classListPresenter list size = 0.
	self selectServiceNamed: 'Rowan-Tests' in: self sunitPresenter packageListPresenter.
	self denyIsNil: (self serviceNamed: 'RwMoveTest' in: self sunitPresenter classListPresenter).
	self assert: self sunitPresenter classListPresenter list size > 0.
	self denyIsNil: (self serviceNamed: 'RwBrowserToolApiTest' in: self sunitPresenter classListPresenter).!

test_sunitBrowserHasRowanTestMethods
	self selectServiceNamed: 'Rowan-Tests' in: self sunitPresenter packageListPresenter.
	self assert: self sunitPresenter methodListPresenter list size = 0.
	self selectServiceNamed: 'RwMoveTest' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter list size > 0.!

test_sunitBrowserPassingDebugTestShowsResult
	self testsIssue: #issue218 withTitle: 'Ctl-B does not `debug` selected test in SUnit browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self selectServiceNamed: 'test1' in: self sunitPresenter methodListPresenter.
	self assert: self sunitPresenter methodListPresenter selections size equals: 1.
	self assert: self sunitPresenter methodListPresenter selection first selector equals: #test1.
	self assertIsNil: self sunitPresenter methodListPresenter selections first testResult.
	self sunitPresenter debug.
	self assert: self sunitPresenter methodListPresenter selection first selector equals: #test1.
	self assert: self sunitPresenter methodListPresenter selections size equals: 1.
	self assert: self sunitPresenter methodListPresenter selections first testResult equals: 'passed'!

test_sunitBrowserSortOrderAfterAddingMethod
	|  visibleTestSelectors |
	self testsIssue: #issue775 withTitle: 'Stubborn sorting in the Sunit browser'.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self saveClass: 'LisaTest' superclass: 'TestCase' instVars: #() package: 'RowanSample1-Tests'. 
	self saveMethod: 'test_foo'  in: 'LisaTest' category: 'tests'. 
	self saveMethod: 'test_bar'  in: 'LisaTest' category: 'tests'. 
	self saveMethod: 'test_zork'  in: 'LisaTest' category: 'tests'. 
	self saveClass: 'LisaSubTest' superclass: 'LisaTest' instVars: #() package: 'RowanSample1-Tests'. 
	self saveMethod: 'test_foo'  in: 'LisaSubTest' category: 'tests'. 
	self saveMethod: 'test_bar'  in: 'LisaSubTest' category: 'tests'. 
	self saveMethod: 'test_zork'  in: 'LisaSubTest' category: 'tests'. 
	self saveClass: 'LisaSubTestTwo' superclass: 'LisaSubTest' instVars: #() package: 'RowanSample1-Tests'. 
	self saveMethod: 'test_foo'  in: 'LisaSubTestTwo' category: 'tests'. 
	self saveMethod: 'test_bar'  in: 'LisaSubTestTwo' category: 'tests'. 
	self saveMethod: 'test_zork'  in: 'LisaSubTestTwo' category: 'tests'. 
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServicesNamed: #('LisaTest' 'LisaSubTest' 'LisaSubTestTwo') in: self sunitPresenter classListPresenter.
	visibleTestSelectors := self sunitPresenter methodListPresenter list collect:[:methodService | methodService selector]. 
	self assert: visibleTestSelectors asArray equals: #(#test_bar #test_bar #test_bar #test_foo #test_foo #test_foo #test_zork #test_zork #test_zork). 
	self saveMethod: 'test_newMethod'  in: 'LisaTest' category: 'tests'. 
	visibleTestSelectors := self sunitPresenter methodListPresenter list collect:[:methodService | methodService selector]. 
	self assert: visibleTestSelectors asArray equals: #(#test_bar #test_bar #test_bar #test_foo #test_foo #test_foo #test_newMethod #test_zork #test_zork #test_zork). !

test_sunitBrowserUpdateRightClassInHierarchy
	"inherited test runs don't impact test results of super class test runs"

	self testsIssue: #issue419 withTitle: 'Sunit confused by multiple Sunit tabs in project browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: nil.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self
		saveClass: 'RowanSample1TestSubclass'
		superclass: 'RowanSample1Test'
		instVars: #()
		package: 'RowanSample1-Tests'.
	
	[self projectsPresenter selectSUnitTab.
	self projectsPresenter sunitPresenter runAll.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult
		equals: 'passed'.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: nil.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1TestSubclass' in: self sunitPresenter classListPresenter.
	self projectsPresenter sunitPresenter runAll.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult
		equals: 'passed'.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: 'passed']
			ensure: [self projectsPresenter basicRemoveClass: self projectsPresenter selectedClass].!

test_sunitBrowserUpdateRightClassInHierarchy2
	"inherited test runs don't impact test results of super class test runs"

	self testsIssue: #issue419 withTitle: 'Sunit confused by multiple Sunit tabs in project browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: nil.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self selectRowanSample1Test.
	self
		saveClass: 'RowanSample1TestSubclass'
		superclass: 'RowanSample1Test'
		instVars: #()
		package: 'RowanSample1-Tests'.
	
	[self projectsPresenter selectSUnitTab.
	self projectsPresenter sunitPresenter reset. 
	self sunitPresenter runAll.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult
		equals: nil.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: 'passed'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1TestSubclass' in: self sunitPresenter classListPresenter.
	self sunitPresenter runAll.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult
		equals: 'passed'.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: 'passed']
			ensure: [self projectsPresenter basicRemoveClass: self projectsPresenter selectedClass]!

test_sunitBrowserUpdates
	self testsIssue: #issue410
		withTitle: 'Selecting class in Project Browser changes test status icons in SUnit Browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self projectsPresenter sunitPresenter reset. 
	self selectRowanSample1Test.
	self projectsPresenter selectSUnitTab.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first selector
		equals: #test1.
	self assertIsNil: self projectsPresenter sunitPresenter methodListPresenter list first testResult.
	self assert: self sunitPresenter methodListPresenter list first selector
		equals: #test1.
	self assertIsNil: self sunitPresenter methodListPresenter list first testResult.
	self projectsPresenter sunitPresenter runAll.
	"assert tests in sunit browser updated"
	self assert: self  sunitPresenter methodListPresenter list first selector
		equals: #test1.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: 'passed'.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list second selector
		equals: #test2.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult equals: 'passed'!

test_sunitResetTestResultOnClassChange
	"reset test results when classes changed"

	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanDictionaryServiceTest' in: self sunitPresenter classListPresenter.
	self sunitPresenter methodListPresenter list
		do: [:methodService | self assert: methodService testResult isNil].
	self sunitPresenter runAll.
	self sunitPresenter methodListPresenter list
		do: [:methodService | self assert: methodService testResult = 'passed'].
	self selectServiceNamed: 'RowanMethodServiceTest' in: self sunitPresenter classListPresenter.
	self sunitPresenter methodListPresenter list
		do: [:methodService | self assert: methodService testResult isNil].
	self selectServiceNamed: 'RowanDictionaryServiceTest' in: self sunitPresenter classListPresenter.
	self sunitPresenter methodListPresenter list
		do: [:methodService | self assert: methodService testResult isNil]!

test_sunitTabPassingDebugTestShowsResult
	| methodService |
	self testsIssue: #issue218 withTitle: 'Ctl-B does not `debug` selected test in SUnit browser'.
	self openProjectBrowser.
	self selectServiceNamed: 'RowanSample1' in: self projectListPresenter.
	self selectServiceNamed: 'RowanSample1-Tests' in: self packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self classListPresenter.
	self projectsPresenter selectSUnitTab.
	methodService := self projectsPresenter sunitPresenter methodListPresenter list first.
	self projectsPresenter sunitPresenter methodListPresenter selection: (Array with: methodService).
	self projectsPresenter sunitPresenter debug.
	self assert: methodService testResult equals: 'passed'!

test_sunitTabUpdates
	self testsIssue: #issue410
		withTitle: 'Selecting class in Project Browser changes test status icons in SUnit Browser'.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	projectsBrowser := JadeiteTestResource current openProjectsBrowser.
	self projectsPresenter sunitPresenter reset. 
	self selectRowanSample1Test.
	self projectsPresenter selectSUnitTab.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first selector
		equals: #test1.
	self assertIsNil: self projectsPresenter sunitPresenter methodListPresenter list first testResult.
	self sunitPresenter runAll.
	"assert tests in project browser sunit presenter updated"
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first selector
		equals: #test1.
	self assert: self sunitPresenter methodListPresenter list first testResult equals: 'passed'.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list second selector
		equals: #test2.
	self assert: self projectsPresenter sunitPresenter methodListPresenter list first testResult equals: 'passed'!

test_testCountBar
	"sanity check that the status bar matches what's in the method list"

	| classService |
	self selectServiceNamed: 'Rowan-Services-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'JadeServerTest' in: self sunitPresenter classListPresenter.
	classService := self sunitPresenter classListPresenter selections first.
	self assert: self sunitPresenter methodListPresenter list size
		equals: classService visibleTests size.
	self assert: self sunitPresenter testCasesSize
		equals: 'Test Cases:' , self sunitPresenter methodListPresenter model size printString.
	self assert: self sunitPresenter testClassesSize
		equals: 'Test Classes:'
				, ((session executeString: 'RowanServicesTest allSubclasses size') + 1 + 1) printString	"RwRowanProjectIssuesTest extension now shows up. Hence the other +1"!

test_testsRunInSelectedTestClass
	self testsIssue: #issue391 withTitle: '(3.0.53) SUnit browser running test method in wrong class'.
	self openProjectBrowser.
	self setupRunInSelectedTestClassTest.
	self selectServiceNamed: 'RowanSample1-Tests' in: self sunitPresenter packageListPresenter.
	self selectServiceNamed: 'RowanSample1Test' in: self sunitPresenter classListPresenter.
	self selectSUnitBrowserMethodsNamed: (Array with: #test_method).
	self assert: self sunitPresenter debug isKindOf: JadeiteSUnitPresenter.
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self assert: (session executeString: 'RowanSample1Test testClassVar') equals: #RowanSample1Test.
	self assert: self sunitPresenter runSelected isKindOf: JadeTestResult.	"runSelected sends back the result of the last test"
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self assert: (session executeString: 'RowanSample1Test testClassVar') equals: #RowanSample1Test.
	self assert: self sunitPresenter runAll isKindOf: JadeTestResult.	"runSelected sends back the result of the last test"
	self assert: (session executeString: 'RowanSample1Test testClassVar') equals: #RowanSample1Test.
	"set the selected class to the subclass, but the test will be run in the super.
	Ensure the test was run in the subclass"
	self selectServiceNamed: 'RowanSample1SubClassTest' in: self sunitPresenter classListPresenter.
	self selectSUnitBrowserMethodsNamed: (Array with: #test_method).
	self assert: self sunitPresenter debug isKindOf: JadeiteSUnitPresenter.
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self assert: (session executeString: 'RowanSample1Test testClassVar')
		equals: #RowanSample1SubClassTest.
	self assert: self sunitPresenter runSelected isKindOf: JadeTestResult.	"runSelected sends back the result of the last test"
	self assert: self sunitPresenter textResultPresenter view backcolor equals: Color darkGreen.
	self assert: self sunitPresenter textResultPresenter value
		equals: '1 run, 1 passed, 0 failures, 0 errors'.
	self assert: (session executeString: 'RowanSample1Test testClassVar')
		equals: #RowanSample1SubClassTest.
	self assert: self sunitPresenter runAll isKindOf: JadeTestResult.	"runSelected sends back the result of the last test"
	self assert: (session executeString: 'RowanSample1Test testClassVar')
		equals: #RowanSample1SubClassTest! !
!JadeiteSUnitSupportTestCase categoriesFor: #assertMenuItem:isEnabled:!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #assertPackageInList:!private!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #denyPackageInList:!private!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #isSampleProjectLoaded!private!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #methodListPresenter!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #projectsPresenter!private!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #selecProjectBrowserMethodNamed:!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #selecProjectBrowserMethodsNamed:!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #selectSUnitBrowserMethodNamed:!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #selectSUnitBrowserMethodsNamed:!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #setUp!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #setupAbstractSuperWithTest!public!support!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #setupRunInSelectedTestClassTest!private!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #setupTestSuperclass!private!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #sunitPresenter!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #tearDown!public!support! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_abortNoSelections!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_abortWithSelections!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_abstractTestAppearsOnlyInSubclasses!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_addNewTestPackage!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_browseMethods!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_browseSelectedMethodForNewlyAddedTest!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_browseSunitClass!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_browseTestSelectorsInSUnitTab!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_commitNoSelections!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_commitWithSelections!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_debugWithDifferentSelectedClasses!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_dontAddClassWhenPackageNotSelected!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_dontChangeTabs!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_dontClearResults!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_extensionOnlyTestClassVisible!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_extensionTestShowsUpInSUnitBrowser!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_extensionTestsShowUpInExtensionAndDefinedPackages!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_inheritedTests!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_maintainColumnSort!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_maintainColumnSortChangeFromProjectBrowser!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_menuEnablementDebugInClassPresenter!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_menuEnablementRunAndMesureTimeInClassPresenter!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_menuEnablementRunSelectedInClassPresenter!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_methodColumnDisplay!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_multiSelectClasses!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_multiSelectNoDuplicates!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_openSunitBrowser!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_openTwoSUnitBrowsersLosingPackageSelection!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_packageRemovedOnClassRemoval!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_projectBrowserRunAllTests!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_projectBrowserRunSelectedTests!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_projectBrowserTestRunningMenuItemEnablement!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_refresh!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_registeredPresentersInSUnitBrowserCleanedUp!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_resetMenuItemsNamedProperly!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_resetStatusBar!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_runClassTests!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sameSelectorInheritedTests!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sameSelectorInheritedTestsFailureInSuper!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_saveMethodInProjectBrowser!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_selectCategoryInProjectBrowserDoesNotUpdateSunitBrowser!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_selectClassDoesNotLoseTestResults!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_selectInProjectBrowserDoesNotUpdateSunitBrowser!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_selectionRemainsVisible!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_selectMethodFromProjectBrowser!public!test updates from other browsers!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_statusBarUpdatesAfterDebug!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_statusBarUpdatesAfterRunSelected!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserHasRowanPackages!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserHasRowanTestClasses!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserHasRowanTestMethods!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserPassingDebugTestShowsResult!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserSortOrderAfterAddingMethod!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserUpdateRightClassInHierarchy!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserUpdateRightClassInHierarchy2!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitBrowserUpdates!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitResetTestResultOnClassChange!public!test sunit tab! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitTabPassingDebugTestShowsResult!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_sunitTabUpdates!public!test updates from other browsers! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_testCountBar!public!tests! !
!JadeiteSUnitSupportTestCase categoriesFor: #test_testsRunInSelectedTestClass!public!tests! !

