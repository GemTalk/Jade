"Filed out from Dolphin Smalltalk 7"!

JadeiteAbstractTestCase subclass: #JadeiteTranscriptTestCase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteTranscriptTestCase guid: (GUID fromString: '{5527e061-53db-41d8-b3ef-bea5af13e6aa}')!
JadeiteTranscriptTestCase comment: ''!
!JadeiteTranscriptTestCase categoriesForClass!Unclassified! !
!JadeiteTranscriptTestCase methodsFor!

test_abortRemovesProjectsInAllBrowsers
	| sunitBrowser |
	projectsBrowser := self openWindow: [transcript openJadeiteProjectsBrowser].
	sunitBrowser := self openWindow: [transcript jadeBrowseTests].
	
	[self denyIsNil: (self projectListPresenter list
				detect: [:projectService | projectService name = 'RowanSample1']
				ifNone: []).
	self denyIsNil: (transcript projectListPresenter projectListPresenter list
				detect: [:projectService1 | projectService1 name = 'RowanSample1']
				ifNone: []).
	self denyIsNil: (sunitBrowser primaryPresenter packageListPresenter list
				detect: [:projectService1 | projectService1 name = 'RowanSample1-Tests']
				ifNone: []).
	transcript toolbarPresenter abort.
	self assertIsNil: (self projectListPresenter list
				detect: [:projectService | projectService name = 'RowanSample1']
				ifNone: []).
	self assertIsNil: (transcript projectListPresenter projectListPresenter list
				detect: [:projectService2 | projectService2 name = 'RowanSample1']
				ifNone: []).
	self assertIsNil: (sunitBrowser primaryPresenter packageListPresenter list
				detect: [:projectService1 | projectService1 name = 'RowanSample1-Tests']
				ifNone: []).
	self cloneRowanSample1.
	self ensureRowanSample1Loaded]
			ensure: 
				[SessionManager inputState pumpMessages.
				self destroy: projectsBrowser.
				self destroy: sunitBrowser]!

test_abortTransaction
	self testsIssue: #issue383 withTitle: '(3.0.53) the commit button on the SUnit browser is silent'.
	transcript projectListPresenter refresh.
	self assertProjectInList: 'RowanSample1'.
	transcript toolbarPresenter abort.
	self denyProjectInList: 'RowanSample1'.
	self cloneRowanSample1.
	self ensureRowanSample1Loaded!

test_autoCommitOff
	| answeringService |
	self testsIssue: #issue396 withTitle: 'Ability to turn on autocommit would be nice'.
	self setAutoCommit: false.
	session executeString: 'UserGlobals at: #TestCommit put: true'.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	self abortTransaction.
	self assertIsNil: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	"any service call will commit the transaction"
	session executeString: 'UserGlobals at: #TestCommit put: true'.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	answeringService := RowanAnsweringService new.
	answeringService
		command: #exec:;
		commandArgs: (Array with: '3+4').
	self issueCommand: answeringService.
	self assert: answeringService answer equals: '7'.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	self abortTransaction.
	
	[self assertIsNil: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]')	"autoCommit off. TestCommit was not committed"]
			ensure: 
				[self cloneRowanSample1.
				self ensureRowanSample1Loaded]!

test_autoCommitOn
	| answeringService |
	self testsIssue: #issue396 withTitle: 'Ability to turn on autocommit would be nice'.
	
	[self setAutoCommit: true.
	session executeString: 'UserGlobals at: #TestCommit put: true'.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	self abortTransaction.
	self assertIsNil: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	"any service call will commit the transaction"
	session executeString: 'UserGlobals at: #TestCommit put: true'.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	answeringService := RowanAnsweringService new.
	answeringService
		command: #exec:;
		commandArgs: (Array with: '3+4').
	self issueCommand: answeringService.
	self assert: answeringService answer equals: '7'.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]').
	self abortTransaction.
	self assert: (session executeString: 'UserGlobals at: #TestCommit ifAbsent:[]')	"TestCommit was committed"]
			ensure: 
				[session executeString: 'UserGlobals removeKey: #TestCommit'.
				self commitTransaction.
				self setAutoCommit: false]!

test_autoCommitSet
	self testsIssue: #issue396 withTitle: 'Ability to turn on autocommit would be nice'.
	self setAutoCommit: false.
	self assert: (session executeString: 'SessionTemps current at: #''Jadeite_AutoCommit''')
		equals: false.
	self setAutoCommit: true.
	
	[self assert: (session executeString: 'SessionTemps current at: #''Jadeite_AutoCommit''')
		equals: true]
			ensure: [transcript autoCommit: false]!

test_browseClassMenuItem
	| browseMenu browseClassItem |
	self testsIssue: #issue235 withTitle: 'Need Find Class/Method from console'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseClassItem := browseMenu items detect: [:command | '*Find*Class*' match: command text]
				ifNone: [].
	self denyIsNil: browseClassItem.
	self assert: browseClassItem command equals: #browseClass.
	self assert: (transcript class canUnderstand: #browseClass)!

test_browseClassReferencesMenuItem
	| browseMenu browseClassReferencesItem |
	self testsIssue: #issue300
		withTitle: '`would be nice to have `browse references to class` here as well'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseClassReferencesItem := browseMenu items
				detect: [:command | '*Browse*Class*References*' match: command text]
				ifNone: [].
	self denyIsNil: browseClassReferencesItem.
	self assert: browseClassReferencesItem command equals: #browseClassReferences.
	self assert: (transcript class canUnderstand: #browseClassReferences)!

test_browseFindClassMenuItem
	| browseMenu findClassMenuItem |
	self testsIssue: #issue235 withTitle: 'Need Find Class/Method from console'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	findClassMenuItem := browseMenu items detect: [:command | '*Find*Class*' match: command text]
				ifNone: [].
	self denyIsNil: findClassMenuItem.
	self assert: findClassMenuItem command equals: #browseClass.
	self assert: (transcript class canUnderstand: #browseClass)!

test_browseImplementors
	| methodListBrowser methodList |
	self testsIssue: #issue235 withTitle: 'Need Find Class/Method from console'.
	TestMessageBox enableJadeiteTestMessageBox.
	
	[TestPrompter plannedResult: 'size'.
	methodListBrowser := transcript browseImplementorsOf.
	methodList := methodListBrowser primaryPresenter methodListPresenter methodListPresenter list.
	self assert: methodList notEmpty.
	self assert: ('Implementors of ''size'' for*' match: methodListBrowser caption)]
			ensure: 
				[TestMessageBox disableJadeiteTestMessageBox.
				self destroy: methodListBrowser]!

test_browseImplementorsMenuItem
	| browseMenu browseImplementorsItem |
	self testsIssue: #issue251 withTitle: '`Browse Methods Containing` available from Console menu'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseImplementorsItem := browseMenu items
				detect: [:command | '*Browse*Implementors*' match: command text]
				ifNone: [].
	self denyIsNil: browseImplementorsItem.
	self assert: browseImplementorsItem command equals: #browseImplementorsOf.
	self assert: (transcript class canUnderstand: #browseMethodsContaining)!

test_browseLiteralsReferencesMenuItem
	| browseMenu browseLiteralReferencesItem |
	self testsIssue: #issue251 withTitle: '`Browse Methods Containing` available from Console menu'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseLiteralReferencesItem := browseMenu items
				detect: [:command | '*Browse*Literal*References*' match: command text]
				ifNone: [].
	self denyIsNil: browseLiteralReferencesItem.
	self assert: browseLiteralReferencesItem command equals: #browseLiteralReferences.
	self assert: (transcript class canUnderstand: #browseLiteralReferences)!

test_browseMethodsContainingMenuItem
	| browseMenu browseMethodsContainingItem |
	self testsIssue: #issue251 withTitle: '`Browse Methods Containing` available from Console menu'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseMethodsContainingItem := browseMenu items
				detect: [:command | '*Browse*Methods*Containing*' match: command text]
				ifNone: [].
	self denyIsNil: browseMethodsContainingItem.
	self assert: browseMethodsContainingItem command equals: #browseMethodsContaining.
	self assert: (transcript class canUnderstand: #browseMethodsContaining)!

test_browseProjectsMenuItem
	| browseMenu browseProjectsMenuItem |
	self testsIssue: #issue235 withTitle: 'Need Find Class/Method from console'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseProjectsMenuItem := browseMenu items
				detect: [:command | '*Browse*Projects*' match: command text]
				ifNone: [].
	self denyIsNil: browseProjectsMenuItem.
	self assert: browseProjectsMenuItem command equals: #openJadeiteProjectsBrowser.
	self assert: (transcript class canUnderstand: #openJadeiteProjectsBrowser)!

test_browseSenders
	| methodListBrowser methodList |
	self testsIssue: #issue235 withTitle: 'Need Find Class/Method from console'.
	TestMessageBox enableJadeiteTestMessageBox.
	
	[TestPrompter plannedResult: 'abort'.
	methodListBrowser := transcript browseSendersOf.
	methodList := methodListBrowser primaryPresenter methodListPresenter methodListPresenter list.
	self assert: methodList notEmpty.
	self assert: ('Senders of ''abort'' for*' match: methodListBrowser caption)]
			ensure: 
				[TestMessageBox disableJadeiteTestMessageBox.
				self destroy: methodListBrowser]!

test_browseSendersMenuItem
	| browseMenu browseSendersItem |
	self testsIssue: #issue235 withTitle: 'Need Find Class/Method from console'.
	browseMenu := transcript view menuBar items detect: [:menu | '*Browse*' match: menu text] ifNone: [].
	self denyIsNil: browseMenu.
	browseSendersItem := browseMenu items detect: [:command | '*Browse*Senders*' match: command text]
				ifNone: [].
	self denyIsNil: browseSendersItem.
	self assert: browseSendersItem command equals: #browseSendersOf.
	self assert: (transcript class canUnderstand: #browseSendersOf)!

test_commitTransaction
	self testsIssue: #issue383 withTitle: '(3.0.53) the commit button on the SUnit browser is silent'.
	self cloneRowanSample1.
	self ensureRowanSample1Loaded.
	transcript projectListPresenter refresh.
	self assertProjectInList: 'RowanSample1'.
	transcript toolbarPresenter commit.
	self assertProjectInList: 'RowanSample1'.
	transcript toolbarPresenter abort.
	self assertProjectInList: 'RowanSample1'.
	self unloadSampleProject.
	transcript toolbarPresenter commit. 
	self denyProjectInList: 'RowanSample1'.
	self cloneRowanSample1.
	self ensureRowanSample1Loaded.!

test_jadeiteMenuAdHocExecutionItems
	| jadeiteMenu debugMenuItem executeMenuItem inspectMenuItem displayMenuItem |
	self testsIssue: #issue474 withTitle: '(3.0.69) inconsistent debug menu on workspaces'.
	jadeiteMenu := transcript view menuBar items detect: [:menu | '*Jadeite*' match: menu text]
				ifNone: [].
	self denyIsNil: jadeiteMenu.
	debugMenuItem := jadeiteMenu items detect: [:command | '*Debug*' match: command text] ifNone: [].
	self denyIsNil: debugMenuItem.
	self assert: debugMenuItem command equals: #jadeDebug.
	self assert: (transcript class canUnderstand: #jadeDebug).
	self assert: debugMenuItem commandDescription acceleratorKey = 4674.	"Ctrl-B"
	executeMenuItem := jadeiteMenu items detect: [:command | '*Execute*' match: command text] ifNone: [].
	self denyIsNil: executeMenuItem.
	self assert: executeMenuItem command equals: #jadeExecute.
	self assert: (transcript class canUnderstand: #jadeExecute).
	self assert: executeMenuItem commandDescription acceleratorKey = 4677.	"Ctrl-E"
	inspectMenuItem := jadeiteMenu items detect: [:command | '*Inspect*' match: command text] ifNone: [].
	self denyIsNil: inspectMenuItem.
	self assert: inspectMenuItem command equals: #jadeInspect.
	self assert: (transcript class canUnderstand: #jadeInspect).
	self assert: inspectMenuItem commandDescription acceleratorKey = 4689.	"Ctrl-Q"
	displayMenuItem := jadeiteMenu items detect: [:command | '*Display*' match: command text] ifNone: [].
	self denyIsNil: displayMenuItem.
	self assert: displayMenuItem command equals: #jadeDisplay.
	self assert: (transcript class canUnderstand: #jadeDisplay).
	self assert: displayMenuItem commandDescription acceleratorKey = 4676	"Ctrl-D"!

test_menuNames
	| commitMenuItem checkoutMenuItem contextMenu |
	self testsIssue: #issue342 withTitle: 'Console menu items not matching projects browser'.
	contextMenu := transcript projectListPresenter projectListPresenter view queryContextMenu.
	commitMenuItem := contextMenu items detect: [:menu | 'Commit to Git ...' = menu text] ifNone: [].
	self denyIsNil: commitMenuItem.
	self assert: commitMenuItem command equals: #gitCommit.
	self assert: (transcript projectListPresenter class canUnderstand: #gitCommit).
	checkoutMenuItem := contextMenu items detect: [:menu | 'Checkout Git Branch ...' = menu text]
				ifNone: [].
	self denyIsNil: checkoutMenuItem.
	self assert: checkoutMenuItem command equals: #checkout.
	self assert: (transcript projectListPresenter class canUnderstand: #checkout)!

test_multiSelectProject
	| projectServices projectCount |
	self testsIssue: #issue163
		withTitle: 'Project list in transcript/console should be multi-select for multi-load'.
	projectServices := transcript projectListPresenter projectListPresenter list.
	projectCount := projectServices size.
	transcript projectListPresenter projectListPresenter selections: projectServices.
	self assert: transcript projectListPresenter projectListPresenter selections size equals: projectCount!

test_openChangesBrowser
	| changesBrowser changesItem projectService |
	self testsIssue: #issue384
		withTitle: '(3.0.53) sort by `type` in changes view does not do complete job'.
	projectService := transcript projectListPresenter projectListPresenter list first.
	transcript projectListPresenter projectListPresenter selection: projectService.
	changesItem := transcript projectListPresenter projectListPresenter view queryContextMenu items
				detect: [:menuItem | menuItem command == #projectChanges].
	changesBrowser := changesItem commandDescription performAgainst: transcript projectListPresenter.
	[self assert: (changesBrowser isKindOf: RowanPatchBrowser)] ensure: [self destroy: changesBrowser]!

test_popupMenuHasBrowseClass
	| browseClassItem |
	self testsIssue: #issue429 withTitle: '(3.0.60) ''Browse Class'' on Transcript gets walkback'.
	browseClassItem := transcript transcriptPresenter documentPresenter view contextMenu items
				detect: [:menu | 'Browse Class' match: menu text]
				ifNone: [].
	self denyIsNil: browseClassItem.
	self assert: browseClassItem command equals: #browseSelectedClass.
	self assert: (transcript transcriptPresenter class canUnderstand: #browseSelectedClass)!

test_popupMenuHasBrowseImplementors
	| browseClassItem |
	self testsIssue: #issue429 withTitle: '(3.0.60) ''Browse Class'' on Transcript gets walkback'.
	browseClassItem := transcript transcriptPresenter documentPresenter view contextMenu items
				detect: [:menu | 'Browse Implementors' match: menu text]
				ifNone: [].
	self denyIsNil: browseClassItem.
	self assert: browseClassItem command equals: #browseImplementors.
	self assert: (transcript transcriptPresenter class canUnderstand: #browseImplementors)!

test_popupMenuHasBrowseSenders
	| browseClassItem |
	self testsIssue: #issue429 withTitle: '(3.0.60) ''Browse Class'' on Transcript gets walkback'.
	browseClassItem := transcript transcriptPresenter documentPresenter view contextMenu items
				detect: [:menu | 'Browse Senders' match: menu text]
				ifNone: [].
	self denyIsNil: browseClassItem.
	self assert: browseClassItem command equals: #browseSenders.
	self assert: (transcript transcriptPresenter class canUnderstand: #browseSenders)!

test_projectMenuGitCommitMenuItem
	| gitCommitMenuItem query |
	self testsIssue: #issue317 withTitle: 'Commit when no changes results in walkback'.
	gitCommitMenuItem := transcript projectListPresenter projectListPresenter view queryContextMenu
				items detect: [:menu | '*Commit to Git*' match: menu text] ifNone: [].
	self denyIsNil: gitCommitMenuItem.
	self assert: gitCommitMenuItem command equals: #gitCommit.
	self assert: (transcript projectListPresenter class canUnderstand: #gitCommit).
	query := CommandQuery commandDescription: gitCommitMenuItem
				source: transcript projectListPresenter view.
	transcript projectListPresenter projectListPresenter list do: 
			[:projectService |
			transcript projectListPresenter projectListPresenter selection: projectService.
			transcript projectListPresenter queryCommand: query.
			projectService isDirty ifTrue: [self assert: query isEnabled] ifFalse: [self deny: query isEnabled]]!

test_transcriptNamedConsole
	| clearTranscriptMenuItem wasInstalled |
	(wasInstalled := transcript isTranscriptInstalled) ifFalse: [transcript flipTranscript].
	
	[clearTranscriptMenuItem := transcript transcriptPresenter documentPresenter view queryContextMenu
				items detect: [:menuItem | menuItem command == #clearTranscript].
	clearTranscriptMenuItem commandDescription performAgainst: transcript transcriptPresenter.
	self assert: transcript transcriptPresenter documentPresenter value isEmpty.
	self assert: transcript transcriptPresenter documentPresenter view displayValue isEmpty.
	session executeString: 'Transcript show: ''wroteOnTranscript'''.
	self assert: transcript transcriptPresenter documentPresenter value equals: '''wroteOnTranscript'''.
	clearTranscriptMenuItem commandDescription performAgainst: transcript transcriptPresenter.
	self assert: transcript transcriptPresenter documentPresenter value isEmpty.
	self assert: transcript transcriptPresenter documentPresenter view displayValue isEmpty]
			ensure: [wasInstalled ifFalse: [transcript flipTranscript	"turn back off"]]! !
!JadeiteTranscriptTestCase categoriesFor: #test_abortRemovesProjectsInAllBrowsers!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_abortTransaction!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_autoCommitOff!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_autoCommitOn!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_autoCommitSet!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseClassMenuItem!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseClassReferencesMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseFindClassMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseImplementors!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseImplementorsMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseLiteralsReferencesMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseMethodsContainingMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseProjectsMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseSenders!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_browseSendersMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_commitTransaction!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_jadeiteMenuAdHocExecutionItems!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_menuNames!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_multiSelectProject!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_openChangesBrowser!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_popupMenuHasBrowseClass!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_popupMenuHasBrowseImplementors!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_popupMenuHasBrowseSenders!public!tests! !
!JadeiteTranscriptTestCase categoriesFor: #test_projectMenuGitCommitMenuItem!public!test menus! !
!JadeiteTranscriptTestCase categoriesFor: #test_transcriptNamedConsole!public!tests! !

