| package |
package := Package name: 'Rowan UI Tests'.
package paxVersion: 1;
	basicComment: ''.


package classNames
	add: #JadeiteAbstractTestCase;
	add: #JadeiteDebuggerTestCase;
	add: #JadeiteDictionaryBrowserTestCase;
	add: #JadeiteInspectorTestCase;
	add: #JadeiteMessageBoxTestCase;
	add: #JadeiteMiscellaneousTestCase;
	add: #JadeiteProjectBrowserTestCase;
	add: #JadeiteSUnitSupportTestCase;
	add: #JadeiteTestResource;
	add: #JadeiteTranscriptTestCase;
	add: #RowanTestService;
	add: #TestMessageBox;
	add: #TestPrompter;
	yourself.

package methodNames
	add: #JadeiteProjectsBrowserPresenter -> #classDefinitionPresenter;
	add: #JadeiteSUnitAbstractPresenter -> #methodListPresenter;
	add: #JadeiteSUnitAbstractPresenter -> #methodListPresenter:;
	add: #JadeiteSUnitPresenter -> #classListPresenter;
	add: #JadeiteSUnitPresenter -> #methodListPresenter;
	add: #JadeiteSUnitPresenter -> #packageListPresenter;
	add: #JadeiteSUnitPresenter -> #refresh;
	add: #SUnitBrowserModel -> #debugIndividualTestsWithResources:;
	add: 'MessageBox class' -> #new;
	add: 'Prompter class' -> #createOn:;
	add: 'TestResource class' -> #signalInitializationError;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Tree\Dolphin Tree Presenter';
	add: 'GemStone Session';
	add: 'Jade Deployment';
	add: 'Jade Test Browser';
	add: 'Jade UI Base';
	add: 'Rowan UI Base';
	add: '..\Core\Contributions\Camp Smalltalk\SUnit\SUnit';
	add: '..\Core\Contributions\Odellsoft\SUnitBrowser\SUnitBrowserModelApp';
	yourself).

package!

"Class Definitions"!

MessageBox subclass: #TestMessageBox
	instanceVariableNames: ''
	classVariableNames: 'PlannedResult'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
RowanService subclass: #RowanTestService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Prompter subclass: #TestPrompter
	instanceVariableNames: ''
	classVariableNames: 'PlannedResult'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestCase subclass: #JadeiteAbstractTestCase
	instanceVariableNames: 'session transcript projectsBrowser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteDebuggerTestCase
	instanceVariableNames: 'debugger gsProcess process secondDebugger'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteDictionaryBrowserTestCase
	instanceVariableNames: 'dictionaryBrowser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteInspectorTestCase
	instanceVariableNames: 'inspector'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteMessageBoxTestCase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteMiscellaneousTestCase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteProjectBrowserTestCase
	instanceVariableNames: 'transcriptWritesWereEnabled methodListBrowser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteSUnitSupportTestCase
	instanceVariableNames: 'sunitBrowser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
JadeiteAbstractTestCase subclass: #JadeiteTranscriptTestCase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
TestResource subclass: #JadeiteTestResource
	instanceVariableNames: 'session transcript projectsBrowser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!JadeiteProjectsBrowserPresenter methodsFor!

classDefinitionPresenter

	^classDefinitionPresenter! !
!JadeiteProjectsBrowserPresenter categoriesFor: #classDefinitionPresenter!accessing!public! !

!JadeiteSUnitAbstractPresenter methodsFor!

methodListPresenter
	^methodListPresenter!

methodListPresenter: anObject
	methodListPresenter := anObject! !
!JadeiteSUnitAbstractPresenter categoriesFor: #methodListPresenter!accessing!private! !
!JadeiteSUnitAbstractPresenter categoriesFor: #methodListPresenter:!accessing!private! !

!JadeiteSUnitPresenter methodsFor!

classListPresenter
	^classListPresenter!

methodListPresenter
	^methodListPresenter!

packageListPresenter
	^packageListPresenter!

refresh
	| classSelectionNames methodSelectionNames |
	classListPresenter selections isEmpty ifTrue: [^super reset].
	classSelectionNames := classListPresenter selections collect: [:classService | classService name].
	methodSelectionNames := methodListPresenter selections
				collect: [:methodService | methodService selector].
	BrowserUpdate current updateServices: classListPresenter selections session: self gciSession.
	self updateClasses.
	self updateMethods.
	classListPresenter selections: (classListPresenter list
				select: [:classService | classSelectionNames includes: classService name]).
	methodListPresenter selections: (methodListPresenter list
				select: [:methodService | methodSelectionNames includes: methodService selector]).
	self reset! !
!JadeiteSUnitPresenter categoriesFor: #classListPresenter!accessing!private! !
!JadeiteSUnitPresenter categoriesFor: #methodListPresenter!accessing!private! !
!JadeiteSUnitPresenter categoriesFor: #packageListPresenter!accessing!private! !
!JadeiteSUnitPresenter categoriesFor: #refresh!event handlers!public! !

!MessageBox class methodsFor!

new
	"#JadeiteTestsActive should never be present without the tests loaded"

	| testsActive |
	testsActive := Smalltalk at: #JadeiteTestsActive ifAbsent: [^self basicNew initialize].
	^testsActive
		ifTrue: [(Smalltalk at: #TestMessageBox) basicNew initialize]
		ifFalse: [self basicNew initialize] ! !
!MessageBox class categoriesFor: #new!instance creation!public! !

!Prompter class methodsFor!

createOn: aValueModel
	| testsActive |
	testsActive := Smalltalk at: #JadeiteTestsActive ifAbsent: [^super createOn: aValueModel].
	^testsActive
		ifTrue: [(Smalltalk at: #TestPrompter) basicNew]
		ifFalse: 
			[super createOn: aValueModel]! !
!Prompter class categoriesFor: #createOn:!instance creation!public! !

!SUnitBrowserModel methodsFor!

debugIndividualTestsWithResources: tests
	| resources |
	#GemTalkAdded.	"forgotten by oa"
	resources := self resourcesFor: tests.
	
	[self
		startResources: resources;
		debugIndividualTests: tests]
			ensure: [self stopResources: resources]! !
!SUnitBrowserModel categoriesFor: #debugIndividualTestsWithResources:!actions!private! !

!TestResource class methodsFor!

signalInitializationError
	"TestSuite>>run: in the SUnit pacakge sends this method
	to the class, but implements it on the instance. That appears
	to be a bug."

	self reset.
	^TestResult signalErrorWith: 'Resource ' , self name , ' could not be initialized'! !
!TestResource class categoriesFor: #signalInitializationError!error handling!public! !

"End of package definition"!

