| package |
package := Package name: 'RSR Support'.
package paxVersion: 1;
	basicComment: ''.


package methodNames
	add: #IndexedInstVarBatchAccessor -> #getBatchAccessors;
	add: #InstVarInspector -> #getInstVarAccessorsOf:;
	add: #RsrForwarder -> #newAspect:class:;
	add: 'RsrForwarder class' -> #newInstanceAspect:class:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\IDE\Base\Development System'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\..\..\RemoteServiceReplication\src-dolphin\RemoteServiceReplication-Compatibility-Dolphin').

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!IndexedInstVarBatchAccessor methodsFor!

getBatchAccessors
	"Answer an <OrderedCollection> of the IndexedInstVarAccessors represented by the receiver"

	| accessors subj offset start end |
	subj := self subject.
	offset := subj basicClass instSize.
	start := self startKey.
	end := start + self batchSize - 1 min: subj basicSize.
	accessors := OrderedCollection new: end - start + 1.
	start to: end
		do: 
			[:n | 
			| item |
			item := subj basicAt: n.
			accessors add: ((item newAspect: n + offset class: self aspectClass) accessorFor: self subject)].
	(self nextBatch: end+1) ifNotNil: [:nextBatch | accessors add: nextBatch].
	^accessors! !
!IndexedInstVarBatchAccessor categoriesFor: #getBatchAccessors!accessing!public! !

!InstVarInspector methodsFor!

getInstVarAccessorsOf: anInstVarAccessor 
	"Private - Answers an <Array> of  <InstVarAccessors> to show as children of anInstVarAccessor"

	| fixedPart indexedPart inspectee batchAccessor |
	inspectee := [anInstVarAccessor value] on: Error do: [:ex | ex].
	fixedPart := (1 to: inspectee basicClass instSize) collect: 
					[:each | 
					| value aspect |
					value := inspectee instVarAt: each.
					aspect := value newAspect: each class: InstVarAspect.
					aspect accessorFor: inspectee].
	batchAccessor := IndexedInstVarBatchAccessor subject: inspectee batchSize: self defaultBatchSize.
	indexedPart := batchAccessor getBatchAccessors.
	^fixedPart , indexedPart! !
!InstVarInspector categoriesFor: #getInstVarAccessorsOf:!accessing!private! !

!RsrForwarder methodsFor!

newAspect: keyObject class: aspectClass 
	"Answer an instance of the <Aspect> class, aspectClass, appropriately configured to represent
	the aspect of the receiver named by the <Object>, keyObject (usually a <Symbol>)."

	^self basicClass newInstanceAspect: keyObject class: aspectClass! !
!RsrForwarder categoriesFor: #newAspect:class:!Jadeite!public! !

!RsrForwarder class methodsFor!

newInstanceAspect: aSymbol class: aspectClass 
	"Private - Answer a new <Aspect> of the class, aspectClass, and with name, aSymbol, 
    	which is appropriate for representing aspects of the receiver's type."

	^aspectClass name: aSymbol! !
!RsrForwarder class categoriesFor: #newInstanceAspect:class:!Jadeite!private! !

"End of package definition"!

